<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>リファクタリング on 元ヨット逆走</title>
    <link>https://gagagal.github.io/hugo-techblog/tags/%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0/</link>
    <description>Recent content in リファクタリング on 元ヨット逆走</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 01 Mar 2021 22:12:03 +0000</lastBuildDate><atom:link href="https://gagagal.github.io/hugo-techblog/tags/%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>『リファクタリング』まとめ Part1</title>
      <link>https://gagagal.github.io/hugo-techblog/portfolio/post1/</link>
      <pubDate>Mon, 01 Mar 2021 22:12:03 +0000</pubDate>
      
      <guid>https://gagagal.github.io/hugo-techblog/portfolio/post1/</guid>
      <description>マーチン・ファウラー著『リファクタリング プログラミングの体質改善テクニック』をまとめていく。
気になった箇所、現在にも応用できそうな箇所を特に記載していくので、全てを書き記すわけではない。
第1章 リファクタリング-最初の例 実例を交えながらリファクタリングがどういうものか説明している。 全体を読んだ後に読んだ方が良さそうなので後回し。
第2章 リファクタリングの原則 リファクタリングの定義 リファクタリング(名詞)…外部から見た時の振る舞いを保ちつつ、理解や修正が簡単になるように、ソフトウェアの内部構造を変換させること。
リファクタリングする(動詞)…一連のリファクタリングを行って、外部から見た振る舞いの変更なしに、ソフトウェアを再構築すること。
リファクタリングを行う理由 ・リファクタリングはソフトウェア設計を向上させる
・リファクタリングはソフトウェアを理解しやすくする
・リファクタリングはバグを見つけ出す
・リファクタリングでより早くプログラミングできる
いつリファクタリングするべきか ・&amp;ldquo;三度目の法則&amp;rdquo;
重複や無駄を意識しつつも二度目までならとにかく作業を続けても構わず、三度目に同じようなことをしていると気づいたならばそこでリファクタリングする。
・機能追加時にリファクタリングを行う
これから修正しようとしているコードを理解する為、容易に機能追加ができない設計が存在する為
・バグフィックス時にリファクタリングを行う
・コードレビューの時にリファクタリングを行う
第3章 コードの不吉な匂い リファクタリングの必要を示す不吉な兆候 特に重要な章
重複したコード 同じようなコードが二箇所以上で見られたら、一箇所にまとめることを考える
同一クラス内の複数メソッドに同じ式がある→メソッドの抽出
重複したコードが兄弟クラス間に見られる→メソッドの抽出、メソッドの引き上げ
全く関係のない二つのクラス間で重複したコードが見られる→クラスの抽出
長すぎるメソッド 間接層を持たせるべき。
メソッドを短くしたい→メソッドの抽出
引数や一時変数が多すぎるメソッド→問い合わせによる一時変数の置き換え
長い引数リスト→引数オブジェクトの導入、オブジェクトそのものの受け渡し
それでも一時変数や引数が残る→メソッドオブジェクトによるメソッドの置き換え
条件分岐やループ→条件記述の分解
巨大なクラス 一つのクラスがあまりに多くの仕事をしている時、たいていインスタンス変数を持ちすぎている。よって重複コードが現れやすい。
いくつかの変数をまとめる→クラスの抽出
新しいコンポーネントがサブクラスになりそう→サブクラスの抽出
クラスがインスタンス変数を全て使っていない→クラスの抽出、サブクラスの抽出
インタフェースの抽出
巨大なクラスがGUI部分である→観察されるデータの複製
多すぎる引数 既知のオブジェクトに問い合わせてそのデータを一つの引数にしてうけとることが可能→メソッドによる引数の置き換え
オブジェクトそのものの受け渡し、引数オブジェクトの導入
変更の発散 一つのクラスが互いに独立した理由で同じように変更され、その手順も異なる状態 (例)データベースが新しくなるたびに3つのメソッドを変更しなければならない
変更理由ごとにクラスをまとめていく→クラスの抽出</description>
    </item>
    
  </channel>
</rss>
