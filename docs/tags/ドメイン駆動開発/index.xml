<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ドメイン駆動開発 on ヨット逆走テック</title>
    <link>https://gagagal.github.io/hugo-techblog/tags/%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA/</link>
    <description>Recent content in ドメイン駆動開発 on ヨット逆走テック</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 17 May 2021 22:12:03 +0000</lastBuildDate><atom:link href="https://gagagal.github.io/hugo-techblog/tags/%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E9%A7%86%E5%8B%95%E9%96%8B%E7%99%BA/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>『エリック・エヴァンスのドメイン駆動設計』まとめ</title>
      <link>https://gagagal.github.io/hugo-techblog/portfolio/post5/</link>
      <pubDate>Mon, 17 May 2021 22:12:03 +0000</pubDate>
      
      <guid>https://gagagal.github.io/hugo-techblog/portfolio/post5/</guid>
      <description>序文 DDDの原則
 コアドメインに集中すること ドメインの実践者とソフトウェアの実践者による創造的な共同作業を通じてモデルを探求すること 明示的な境界づけられたコンテキストの内部でユビキタス言語を語ること  前提
 開発がイテレーティブ(反復的)であること 開発者とドメインエキスパートが密接に関わっている   第0章 モデル モデルとは簡素化であり、問題を解決する上で関連する側面を抽象化し、それ以外の詳細を無視することによって行われた現実に対する一つの解釈 図を用いて表現する
ドメイン ソフトウェアプログラムはそれを使用するユーザーの何らかの活動や関心と関係があり、ユーザーがプログラムを適用する対象領域がソフトウェアのドメインである ドメインは具象も抽象(システムなど)もあり得る
ドメインモデルとは特定の図ではなく、図が伝えようとしている考え方である
ドメイン駆動設計におけるモデルの有用性  モデルと設計の確信が相互に形成し合う モデルはチームメンバー全員が使用する言語の基盤である モデルとは蒸留された知識である…モデルは、ドメインの知識を構成して最も関心のある要素を区別するための、チーム内で取り決めた方法である  ソフトウェアの核心はドメインに関係した問題をユーザーの為に解決する能力である モンティ・パイソンの例
第1章 知識を噛み砕く
効果的なモデリングの要素  モデルと実装を結びつける モデルに基づいて言語を洗練させる 知識豊富なモデルを開発する モデルを蒸留する ブレインストーミングと実験を行う  知識の噛み砕き
継続的学習 →ソフトウェアを書き始める時、我々は対象を十分に理解しているわけではない
ポリシーも考える必要がある
知識を噛み砕くことによって初めて、ルールが明確となり、具体化され、折り合いがつけられるか、あるいはスコープの対象外とされるのである
第2章(コミュニケーションと言語の使い方) ドメインモデルは、ソフトウェアプロジェクトにおける共通言語のコアとなることができる
モデルとは、プロジェクトに関わる人々の頭の中で構築された概念の塊であり、ドメインについての洞察を反映した用語と概念間の関係性からできている
ドメインエキスパートと開発者での言語の亀裂が問題である
共通言語（ユビキタス言語）を図やドキュメント、会話の中で用いることユビキタス言語の変更はモデルに対する変更だと思っていること
ユビキタス言語の語彙には、クラスや主要な操作の名前が含まれていて、また、モデルの中で明示されたルールについて議論するための用語も含まれている
ユビキタス言語は開発者同士、開発者とドメインエキスパート同士で当然の如く用いられてなければならない
ユビキタス言語を用いる上での不便さこそが設計の不備を教えてくれる
ユビキタス言語における変更は、モデルに対する変更である
ユビキタス言語は、設計にあってコードに現れない側面を伝達するための主要な手段である
モデルを改良する最適な方法の一つは話すことである
ドメインエキスパートがモデルを理解できないのなら、モデルに問題がある
モデルは図ではない
ドキュメントが守るべき指針
 すでにコードがうまくやっていることを、ドキュメントでもやろうとするべきでは無い ドキュメントは活動の役に立たなければならず、最新の状態に保たなければならない  第3章(モデルと実装を結びつける) モデルを作るもののコーディングとは結びつかない(あるいは意図的に断絶される)ものが多い
設計、あるいは設計の中心となる部分がドメインモデルに紐づいていないならばそのモデルにほとんど価値はなく、そのソフトウェアが正確かどうかも疑わしい。分析と設計の間に致命的な亀裂が生じていると、それらの作業で得られる洞察は互いに生かされない
モデル駆動設計は分析モデルと設計という二分法を捨て去り、両方の目的に使える単一のモデルを探し出す。 そのモデルは全く別々の二つの目標を満たす必要があるため、我々はモデルに対する要求をもっと厳しくしなければならない
ソフトウェアシステムの一部を設計する際には、紐づけが明らかになるように ドメインモデルを文字通りの意味で忠実に反映させる必要がある。モデルについて再検討し、より自然にソフトウェアに実装されるように修正する。逆にドメインに対する深い洞察を反映させようとするときにも言える。
モデルは全員の共通認識にしなければならない</description>
    </item>
    
  </channel>
</rss>
